/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cobertura_de_sucursales_andres.da.corte;

import java.util.*;
import javax.swing.*;
import java.io.*;
import org.json.*;

/**
 *
 * @author dacor
 */
public class Ventana extends javax.swing.JFrame {

    private JTextArea textArea;
    
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        CargarArchivo = new javax.swing.JButton();
        MostrarGrafo = new javax.swing.JButton();
        EstablecerRadio = new javax.swing.JButton();
        ColocarSucursal = new javax.swing.JButton();
        QuitarSucursal = new javax.swing.JButton();
        VerCoberturaSucursal = new javax.swing.JButton();
        VerCoberturaTotal = new javax.swing.JButton();
        AgregarLinea = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CargarArchivo.setText("Cargar un Archivo");
        CargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoActionPerformed(evt);
            }
        });

        MostrarGrafo.setText("Mostrar Grafo");
        MostrarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarGrafoActionPerformed(evt);
            }
        });

        EstablecerRadio.setText("Establecer Radio");
        EstablecerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EstablecerRadioActionPerformed(evt);
            }
        });

        ColocarSucursal.setText("Colocar una Sucursal");
        ColocarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColocarSucursalActionPerformed(evt);
            }
        });

        QuitarSucursal.setText("Quitar un Sucursal");
        QuitarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitarSucursalActionPerformed(evt);
            }
        });

        VerCoberturaSucursal.setText("Ver Cobertura");
        VerCoberturaSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerCoberturaSucursalActionPerformed(evt);
            }
        });

        VerCoberturaTotal.setText("Cobertura Total");
        VerCoberturaTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerCoberturaTotalActionPerformed(evt);
            }
        });

        AgregarLinea.setText("Agregar Linea");
        AgregarLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarLineaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(QuitarSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CargarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ColocarSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AgregarLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EstablecerRadio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(MostrarGrafo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VerCoberturaSucursal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VerCoberturaTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CargarArchivo)
                    .addComponent(MostrarGrafo))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EstablecerRadio)
                    .addComponent(ColocarSucursal))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(QuitarSucursal)
                    .addComponent(VerCoberturaSucursal))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VerCoberturaTotal)
                    .addComponent(AgregarLinea))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoActionPerformed
        try {
            RedGlobal.redGlobal.cargarDesdeArchivo();
            JOptionPane.showMessageDialog(this, "Archivo cargado exitosamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se ha podido cargar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }//GEN-LAST:event_CargarArchivoActionPerformed

    private void MostrarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarGrafoActionPerformed
        RedGlobal.redGlobal.mostrarGrafo();
    }//GEN-LAST:event_MostrarGrafoActionPerformed

    private void EstablecerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EstablecerRadioActionPerformed
        String nuevoRadio = JOptionPane.showInputDialog(this, "Ingrese el valor del nuevo radio:");
        try {
            int radio = Integer.parseInt(nuevoRadio);
            RedGlobal.redGlobal.establecerRadioCobertura(radio);
            JOptionPane.showMessageDialog(this, "Nuevo radio establecido a " + radio);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EstablecerRadioActionPerformed

    private void ColocarSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColocarSucursalActionPerformed
        MiConjunto<String> paradasDisponibles = RedGlobal.redGlobal.paradas.obtenerClaves();
        MiLista<String> paradasFiltradas = new MiLista<>();
        Nodo<String> nodoActual = paradasDisponibles.obtenerElementos().cabeza;
        while (nodoActual != null) {
            String parada = nodoActual.valor;
            Parada paradaObj = RedGlobal.redGlobal.paradas.obtener(parada);
            if (!paradaObj.tieneSucursal()) {
                paradasFiltradas.agregar(parada);
            }
            nodoActual = nodoActual.siguiente;
        }

        String[] paradasArray = new String[paradasFiltradas.longitud()];
        nodoActual = paradasFiltradas.cabeza;
        int index = 0;
        while (nodoActual != null) {
            paradasArray[index++] = nodoActual.valor;
            nodoActual = nodoActual.siguiente;
        }

        String nombreParada = (String) JOptionPane.showInputDialog(this, "Seleccione la parada para colocar o quitar la sucursal:",
                "Seleccionar Parada", JOptionPane.QUESTION_MESSAGE, null, paradasArray, paradasArray.length > 0 ? paradasArray[0] : null);

        if (nombreParada != null && !nombreParada.trim().isEmpty()) {
            if (RedGlobal.redGlobal.paradas.contieneClave(nombreParada)) {
                Parada parada = RedGlobal.redGlobal.paradas.obtener(nombreParada);
                if (parada.tieneSucursal()) {
                    RedGlobal.redGlobal.quitarSucursal(nombreParada);
                    JOptionPane.showMessageDialog(this, "Sucursal eliminada de la parada: " + nombreParada);
                } else {
                    RedGlobal.redGlobal.colocarSucursal(nombreParada);
                    JOptionPane.showMessageDialog(this, "Sucursal colocada en la parada: " + nombreParada);
                }
            } else {
                JOptionPane.showMessageDialog(this, "La parada especificada no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una parada válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ColocarSucursalActionPerformed

    private void QuitarSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitarSucursalActionPerformed
        MiConjunto<String> paradasDisponibles = RedGlobal.redGlobal.paradas.obtenerClaves();
        MiLista<String> paradasConSucursal = new MiLista<>();
        Nodo<String> nodoActual = paradasDisponibles.obtenerElementos().cabeza;
        while (nodoActual != null) {
            String parada = nodoActual.valor;
            Parada paradaObj = RedGlobal.redGlobal.paradas.obtener(parada);
            if (paradaObj.tieneSucursal()) {
                paradasConSucursal.agregar(parada);
            }
            nodoActual = nodoActual.siguiente;
        }

        String[] paradasArray = new String[paradasConSucursal.longitud()];
        nodoActual = paradasConSucursal.cabeza;
        int index = 0;
        while (nodoActual != null) {
            paradasArray[index++] = nodoActual.valor;
            nodoActual = nodoActual.siguiente;
        }

        String nombreParada = (String) JOptionPane.showInputDialog(this, "Seleccione la parada para quitar la sucursal:",
                "Seleccionar Parada", JOptionPane.QUESTION_MESSAGE, null, paradasArray, paradasArray.length > 0 ? paradasArray[0] : null);

        if (nombreParada != null && !nombreParada.trim().isEmpty()) {
            if (RedGlobal.redGlobal.paradas.contieneClave(nombreParada)) {
                Parada parada = RedGlobal.redGlobal.paradas.obtener(nombreParada);
                if (parada.tieneSucursal()) {
                    RedGlobal.redGlobal.quitarSucursal(nombreParada);
                    JOptionPane.showMessageDialog(this, "Sucursal quitada de la parada: " + nombreParada);
                } else {
                    JOptionPane.showMessageDialog(this, "La parada no tiene una sucursal.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "La parada especificada no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una parada válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_QuitarSucursalActionPerformed

    private void VerCoberturaSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerCoberturaSucursalActionPerformed
        MiConjunto<String> paradasDisponibles = RedGlobal.redGlobal.paradas.obtenerClaves();
        MiLista<String> paradasConSucursal = new MiLista<>();
        Nodo<String> nodoActual = paradasDisponibles.obtenerElementos().cabeza;
        while (nodoActual != null) {
            String parada = nodoActual.valor;
            Parada paradaObj = RedGlobal.redGlobal.paradas.obtener(parada);
            if (paradaObj.tieneSucursal()) {
                paradasConSucursal.agregar(parada);
            }
            nodoActual = nodoActual.siguiente;
        }

        String[] paradasArray = new String[paradasConSucursal.longitud()];
        nodoActual = paradasConSucursal.cabeza;
        int index = 0;
        while (nodoActual != null) {
            paradasArray[index++] = nodoActual.valor;
            nodoActual = nodoActual.siguiente;
        }

        String nombreParada = (String) JOptionPane.showInputDialog(this, "Seleccione la parada para ver la cobertura:",
                "Seleccionar Parada", JOptionPane.QUESTION_MESSAGE, null, paradasArray, paradasArray.length > 0 ? paradasArray[0] : null);

        if (nombreParada != null && !nombreParada.trim().isEmpty()) {
            // Aquí llamamos al método que verifica la cobertura de la sucursal seleccionada
            RedGlobal.redGlobal.revisarCoberturaSucursal(nombreParada, "BFS");
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una parada válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_VerCoberturaSucursalActionPerformed

    private void VerCoberturaTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerCoberturaTotalActionPerformed
        RedGlobal.redGlobal.revisarCoberturaTotal();
    }//GEN-LAST:event_VerCoberturaTotalActionPerformed

    private void AgregarLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarLineaActionPerformed
        String nombreLinea = JOptionPane.showInputDialog("Ingrese el nombre de la nueva línea:");
        if (nombreLinea != null && !nombreLinea.isEmpty()) {
            // Solicitar las paradas de la línea
            String paradasInput = JOptionPane.showInputDialog("Ingrese las paradas de la nueva línea, separadas por comas:");
            if (paradasInput != null && !paradasInput.isEmpty()) {
                String[] paradasArray = paradasInput.split(",");
                MiLista<String> paradasLinea = new MiLista<>();
                for (String parada : paradasArray) {
                    paradasLinea.agregar(parada.trim());
                }
                RedGlobal.redGlobal.agregarLinea(nombreLinea, paradasLinea);
                JOptionPane.showMessageDialog(this, "Línea " + nombreLinea + " agregada correctamente.");
            }
        }
    }//GEN-LAST:event_AgregarLineaActionPerformed
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarLinea;
    private javax.swing.JButton CargarArchivo;
    private javax.swing.JButton ColocarSucursal;
    private javax.swing.JButton EstablecerRadio;
    private javax.swing.JButton MostrarGrafo;
    private javax.swing.JButton QuitarSucursal;
    private javax.swing.JButton VerCoberturaSucursal;
    private javax.swing.JButton VerCoberturaTotal;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
